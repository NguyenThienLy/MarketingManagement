drop database ProjectManagement

CREATE DATABASE ProjectManagement
GO

USE ProjectManagement
GO

set dateformat dmy;

SET ANSI_WARNINGS  ON;
-- Your insert TSQL here.
--SET ANSI_WARNINGS ON;

CREATE TABLE EMPLOYEE
(
    NAME nchar(20) PRIMARY KEY,
    
    PASSWORD nchar(20),
	FULLNAME nchar(50),
	GENDER nchar(10),
	YEAROFBIRTH int,
	PHONE nchar (15),
	EMAIL nchar (50),
	POSITION nchar(50),
	ROLE nchar(20) NOT NULL,
	DEPARTMENT nchar(30) NOT NULL,
	STATUS nchar(20)
)
GO

CREATE TABLE DEPARTMENT
(
	DEPARTMENT nchar(30) PRIMARY KEY,
	
	LEADER nchar(20),

	FOREIGN KEY (LEADER) REFERENCES EMPLOYEE(NAME)
)
GO

ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_EMPLOYEE_DEPARTMENT
FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENT(DEPARTMENT)
GO

CREATE TABLE PROJECT
(
	PROJECTID	nchar(20) PRIMARY KEY,
	
	PROJECTNAME	nchar(50),
	LEADER		nchar(20) NOT NULL,
	STARTDATE	date NOT NULL,
	ENDDATE		date NOT NULL,
	PROGRESS	int, -- 0%, 25%, 50%, 75%, 100%.
	PROJECTTYPE	nchar(20), -- normal, admin approval
	POSMPROJECT nchar(5), -- nếu là thuộc dự án in ấn thì điền 'Yes'
	DATEREPEAT	int, -- nhập số ngày lặp lại.
	AUTOREPEAT int, -- cờ tự động lặp lại.
	STARTDATEREPEAT date, -- ngày bắt đầu lặp lại.
	ENDDATEREPEAT date, -- ngày kết thúc lặp lại.
	STATUS nchar(20), -- Complete/ Not complete -- chỉ xem

	FOREIGN KEY (LEADER) REFERENCES EMPLOYEE(NAME)
)
GO

CREATE TABLE STAGE
(	
	PROJECTID nchar(20),
	STAGE int,
	
	STAGESUBJECT nchar(30), -- tên giai đoạn.
	STATUS nchar(20), -- chỉ xem
	
	PRIMARY KEY(PROJECTID, STAGE),
	FOREIGN KEY (PROJECTID) REFERENCES PROJECT(PROJECTID)
)
GO

CREATE TABLE TASKCREATING
(
	PROJECTID nchar(20),
	STAGE int,
	TASK nchar(100),
	
	EMPLOYEE nchar(20) NOT NULL, -- khoá ngoại.
	
	TASKDESCRIPTION nchar(300), -- mô tả cụ thể task.
	STARTDATE date NOT NULL,
	ENDDATE date NOT NULL,
	TASKTYPE nchar(20), -- Normal, Admin approval
	APPROVER nchar(20), -- người duyệt task (nếu task type=admin approval) khóa ngoại.
	ATTACHFILE nchar(3), -- Đính kèm file: yes/ no
	
	PROGRESS int, -- 0%, 25%, 50%, 75%, 100%.
	STATUS nchar(20), -- Not complete, Complete, Wait for approval, Overdue
	FINISHDATE date,
	TIMEDELAY nchar(10), -- thời gian trễ -- chỉ xem
	COLOR nchar(15),
	NOTE nchar(200),
	
	PRIMARY KEY (PROJECTID, STAGE, TASK),
	FOREIGN KEY (EMPLOYEE) REFERENCES EMPLOYEE(NAME),
	FOREIGN KEY (PROJECTID, STAGE) REFERENCES STAGE(PROJECTID, STAGE),
	FOREIGN KEY (APPROVER) REFERENCES EMPLOYEE(NAME)
)
GO

CREATE TABLE ATTACHEDFILE 
(
	PROJECTID nchar(20),
	STAGE int,
	TASK nchar(100),
	TIME datetime,
	
	FILENAME nchar(150),
	NOTE nchar(200),

	PRIMARY KEY(PROJECTID, STAGE, TASK, TIME),
	FOREIGN KEY (PROJECTID, STAGE, TASK) REFERENCES TASKCREATING(PROJECTID, STAGE, TASK)
)
GO

CREATE TABLE TASKASSIGN
(
	PROJECTID nchar(20),
	STAGE int,
	TASK nchar(100),
	EMPLOYEE nchar(20),
	
	TASKDESCRIPTION nchar(300), -- mô tả cụ thể task.
	STARTDATE date,
	ENDDATE date,
	TASKTYPE nchar(20), -- Normal, Admin approval
	APPROVER nchar(20), -- người duyệt task (nếu task type=admin approval) khóa ngoại.
	ATTACHFILE nchar(3), -- Đính kèm file: yes/ no
	
	PROGRESS int, -- 0%, 25%, 50%, 75%, 100%.
	STATUS nchar(20), -- Not complete, Complete, Wait for approval, Overdue
	FINISHDATE date,
	TIMEDELAY nchar(10), -- thời gian trễ
	COLOR nchar(15),
	NOTE nchar(200),
	
	PRIMARY KEY(PROJECTID, STAGE, TASK, EMPLOYEE),
	FOREIGN KEY (EMPLOYEE) REFERENCES EMPLOYEE(NAME)
)
GO

CREATE TABLE HISTORY -- Thiếu khoá ngoại 
(
	NAME nchar(20),
	TIME datetime,
	
	ACTION nchar(100),
	STATUS nchar(10),

	PRIMARY KEY(NAME, TIME),
	FOREIGN KEY(NAME) REFERENCES EMPLOYEE(NAME)
)
GO
---------------------------------------------------------------------------------
CREATE TRIGGER taskCreating_Color
ON TASKCREATING
FOR UPDATE, INSERT
AS 
	IF UPDATE(STATUS)
	BEGIN
		DECLARE @projectID nchar(20)
		DECLARE @stage int
		DECLARE @task nchar(100)

		DECLARE @startDate date
		DECLARE @endDate date
		DECLARE @finishDate date
		DECLARE @status nchar(20)

		SELECT @projectID=I.PROJECTID, @stage=I.STAGE, @task=I.TASK, @startDate=I.STARTDATE, @endDate=I.ENDDATE, 
		@finishDate=I.FINISHDATE, @status=I.STATUS 
		FROM inserted I 
	
		-- LÀM XONG
		IF ((@finishDate <= @endDate) AND @status='Complete')
			UPDATE TASKCREATING SET COLOR='Forest green' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		IF ((@finishDate > @endDate) AND @status='Complete')
			UPDATE TASKCREATING SET COLOR='Orange' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		-- LÀM XONG CHỜ DUYỆT
		IF (@status='Wait for approval')
			UPDATE TASKCREATING SET COLOR='Yellow green' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		-- ĐANG LÀM
		IF (@startDate <= (CONVERT(date,getdate(),120)) AND (CONVERT(date,getdate(),120) <= @endDate) AND @status='Not complete')
			UPDATE TASKCREATING SET COLOR='Light sky blue' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		IF ((CONVERT(date,getdate(),120) > @endDate) AND @status='Overdue')
			UPDATE TASKCREATING SET COLOR='Orange red' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		-- TASK ĐƯỢC YÊU CẦU
		IF (CONVERT(date,getdate(),120) < @startDate)
			UPDATE TASKCREATING SET COLOR='Gray' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
	END
GO

--DROP TRIGGER taskCreating_Color
--GO
---------------------------------------------------------------------------------
CREATE TRIGGER stage_Status
ON TASKCREATING
FOR UPDATE, INSERT
AS 
	IF UPDATE(STATUS)
	BEGIN
		DECLARE @projectID nchar(20)
		DECLARE @stage int
		DECLARE @task nchar(100)
		DECLARE @statusTask nchar(20)
		DECLARE @statusStage int
		
		SET @statusStage=1
		SELECT @projectID=I.PROJECTID, @stage=I.STAGE FROM INSERTED I

		SELECT *
		INTO   #TempTable
		FROM   TASKCREATING WHERE PROJECTID=@projectID AND STAGE=@stage

		WHILE ((SELECT COUNT(*) FROM #TempTable) > 0)
		BEGIN
			SELECT TOP 1 @task=TASK, @statusTask=STATUS FROM #TempTable
			
			IF (@statusTask<>'Complete')	
			BEGIN
				SET @statusStage=0
				BREAK
			END
				
			DELETE #TempTable WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		END

		DROP TABLE #TempTable

		IF(@statusStage=0)
			UPDATE STAGE SET STATUS='Not complete' WHERE PROJECTID=@projectID AND STAGE=@stage
		ELSE IF(@statusStage=1)
			UPDATE STAGE SET STATUS='Complete' WHERE PROJECTID=@projectID AND STAGE=@stage
	END
GO

--DROP TRIGGER stage_Status
--GO
---------------------------------------------------------------------------------
CREATE TRIGGER project_Status
ON STAGE
FOR UPDATE, INSERT
AS 
	IF UPDATE(STATUS)
	BEGIN
		DECLARE @projectID nchar(20)
		DECLARE @stage int
		DECLARE @statusProject int
		DECLARE @statusStage nchar(20)
		
		SET @statusProject=1
		SELECT @projectID=I.PROJECTID FROM INSERTED I

		SELECT *
		INTO   #TempTable
		FROM   STAGE WHERE PROJECTID=@projectID

		WHILE ((SELECT COUNT(*) FROM #TempTable) > 0)
		BEGIN
			SELECT TOP 1 @stage=STAGE, @statusStage=STATUS FROM #TempTable
			
			IF (@statusStage<>'Complete')	
			BEGIN
				SET @statusProject=0
				BREAK
			END
				
			DELETE #TempTable WHERE PROJECTID=@projectID AND STAGE=@stage
		END

		DROP TABLE #TempTable

		IF(@statusProject=0)
			UPDATE PROJECT SET STATUS='Not complete' WHERE PROJECTID=@projectID
		ELSE IF(@statusProject=1)
			UPDATE PROJECT SET STATUS='Complete' WHERE PROJECTID=@projectID
	END
GO

--DROP TRIGGER project_Status
--GO
---------------------------------------------------------------------------------
CREATE TRIGGER project_ProjectTypeRelatedToTaskType
ON PROJECT
FOR UPDATE, INSERT
AS 
	IF UPDATE(PROJECTTYPE)
	BEGIN
		DECLARE @projectID nchar(20)
		DECLARE @stage int
		DECLARE @task nchar(100)
		DECLARE @projectType nchar(20)
		
		SELECT @projectID=I.PROJECTID, @projectType=PROJECTTYPE FROM INSERTED I

		SELECT *
		INTO   #TempTable
		FROM   TASKCREATING WHERE PROJECTID=@projectID

		WHILE ((SELECT COUNT(*) FROM #TempTable) > 0)
		BEGIN
			SELECT TOP 1 @stage=STAGE, @task=TASK FROM #TempTable
			
			IF (@projectType='Normal')	
				UPDATE TASKCREATING SET TASKTYPE='Normal' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
			ELSE IF (@projectType='Admin approval')	
				UPDATE TASKCREATING SET TASKTYPE='Admin approval' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
							
			DELETE #TempTable WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		END

		DROP TABLE #TempTable
	END
GO

--DROP TRIGGER project_ProjectTypeRelatedToTaskType
--GO
---------------------------------------------------------------------------------
CREATE TRIGGER project_Progress
ON TASKCREATING
FOR UPDATE, INSERT
AS 
	IF UPDATE(PROGRESS)
	BEGIN
		DECLARE @projectID nchar(20)
		DECLARE @stage int
		DECLARE @task nchar(100)
		DECLARE @sumOfTask int
		DECLARE @sumOfProgressTask int
		DECLARE @progressTask int
		DECLARE @progressProject float
		
		SET @progressProject=0
		SET @sumOfProgressTask=0

		SELECT @projectID=I.PROJECTID FROM INSERTED I

		SELECT *
		INTO   #TempTable
		FROM   TASKCREATING WHERE PROJECTID=@projectID

		SELECT @sumOfTask=COUNT(*) FROM #TempTable

		WHILE ((SELECT COUNT(*) FROM #TempTable) > 0)
		BEGIN
			SELECT TOP 1 @stage=STAGE, @task=TASK, @progressTask=PROGRESS FROM #TempTable
			
			SET @sumOfProgressTask=@sumOfProgressTask+@progressTask
				
			DELETE #TempTable WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		END

		DROP TABLE #TempTable

		IF(@sumOfProgressTask=0)
		BEGIN
			SET @progressProject=0
			UPDATE PROJECT SET PROGRESS=@progressProject WHERE PROJECTID=@projectID
		END

		ELSE IF(@sumOfProgressTask<>0)
		BEGIN
			SET @progressProject=@sumOfProgressTask*1.0/@sumOfTask

			-- Làm tròn
			IF (@progressProject >= 1 AND @progressProject < 100)
				SET @progressProject=CEILING(ROUND(@progressProject, 0))
			IF (@progressProject > 0 AND @progressProject < 1)
			BEGIN
				IF (@progressProject >= 0.5)
					SET @progressProject=CEILING(ROUND(@progressProject, 1))
				ELSE 
					SET @progressProject=FLOOR(ROUND(@progressProject, 1))
			END

			UPDATE PROJECT SET PROGRESS=@progressProject WHERE PROJECTID=@projectID
		END
	END
GO

--DROP TRIGGER project_Progress
--GO
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataForFormMyTask', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataForFormMyTask
GO 

CREATE PROCEDURE sp_getDataForFormMyTask @employee nchar(20), @startDate nchar(10), @endDate nchar(10), @POSMProject nchar(5), @status nchar(20) 
AS
BEGIN
	-- Nếu ko nhập ngày BĐ, ngày KT
	IF(@startDate = '' AND @endDate = '')
	BEGIN
		IF (@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
			SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
	END

	-- Nếu nhập cả 2 ngày BĐ, ngày KT
	ELSE IF (@startDate <> '' AND @endDate <> '')
	BEGIN
		IF(@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
		 	SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
	END 

	-- Nếu chỉ nhập ngày BĐ
	ELSE IF(@startDate <> '' AND @endDate = '')
	BEGIN
		IF(@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
		 	SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
	END

	-- Nếu chỉ nhập ngày KT
	ELSE IF(@startDate = '' AND @endDate <> '')
	BEGIN
		IF(@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
		 	SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
	END
END
GO

--EXECUTE sp_getDataForFormMyTask 'truong.phan(Kobe)','','','No','Wait for approval'
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataListQuantityForFormMyTask', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataListQuantityForFormMyTask
GO 

CREATE PROCEDURE sp_getDataListQuantityForFormMyTask @employee nchar(20), @startDate nchar(10), @endDate nchar(10), @POSMProject nchar(5)
AS
BEGIN
	CREATE TABLE #Temp (QUANTITY int)

	-- Nếu ko nhập ngày BĐ, ngày KT
	IF(@startDate = '' AND @endDate = '')
	BEGIN	
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END

			ELSE
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
			
		END
	END

	-- Nếu nhập cả 2 ngày BĐ, ngày KT
	ELSE IF (@startDate <> '' AND @endDate <> '')
	BEGIN	
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)

			END		

			ELSE
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
		END
	END 

	-- Nếu chỉ nhập ngày BĐ
	ELSE IF(@startDate <> '' AND @endDate = '')
	BEGIN
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END		

			ELSE
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
		END
	END

	-- Nếu chỉ nhập ngày KT
	ELSE IF(@startDate = '' AND @endDate <> '')
	BEGIN
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END

			ELSE 
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
		END
	END

	SELECT * FROM #Temp
	DROP TABLE #Temp
END
GO

--EXECUTE sp_getDataListQuantityForFormMyTask 'vong.vo(Vittoria)', '', '', 'No'
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataForFormProjectHistory', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataForFormProjectHistory
GO 

CREATE PROCEDURE sp_getDataForFormProjectHistory @employee nchar(20), @startDate nchar(10), @endDate nchar(10), @POSMProject nchar(5), @status nchar(20) 
AS
BEGIN
	-- Nếu ko nhập ngày BĐ, ngày KT
	IF(@startDate = '' AND @endDate = '')
	BEGIN
		IF (@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status<>'Assigned task' AND @status<>'Approver' AND @employee='')
			SELECT * FROM TASKCREATING WHERE STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
			SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee='')
			SELECT * FROM TASKASSIGN WHERE PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
		ELSE IF (@status='Approver' AND @employee='')
			SELECT * FROM TASKCREATING WHERE STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
	END

	-- Nếu nhập cả 2 ngày BĐ, ngày KT
	ELSE IF (@startDate <> '' AND @endDate <> '')
	BEGIN
		IF(@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status<>'Assigned task' AND @status<>'Approver' AND @employee='')
			SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
		 	SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee='')
			SELECT * FROM TASKASSIGN WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
		ELSE IF (@status='Approver' AND @employee='')
			SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
	END 

	-- Nếu chỉ nhập ngày BĐ
	ELSE IF(@startDate <> '' AND @endDate = '')
	BEGIN
		IF(@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status<>'Assigned task' AND @status<>'Approver' AND @employee='') 
			SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
		 	SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee='')
			SELECT * FROM TASKASSIGN WHERE STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
		ELSE IF (@status='Approver' AND @employee='')
			SELECT * FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
	END

	-- Nếu chỉ nhập ngày KT
	ELSE IF(@startDate = '' AND @endDate <> '')
	BEGIN
		IF(@status<>'Assigned task' AND @status<>'Approver' AND @employee<>'')
			SELECT * FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status<>'Assigned task' AND @status<>'Approver' AND @employee='')
			SELECT * FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS=@status AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee<>'')
		 	SELECT * FROM TASKASSIGN WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Assigned task' AND @employee='') 
			SELECT * FROM TASKASSIGN WHERE ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		ELSE IF (@status='Approver' AND @employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
				SELECT * FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
			ELSE 
				SELECT * FROM TASKCREATING WHERE APPROVER=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
		END
		ELSE IF (@status='Approver' AND @employee='')
			SELECT * FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject) ORDER BY STARTDATE DESC
	END
END
GO
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataListQuantityForFormProjectHistory', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataListQuantityForFormProjectHistory
GO 

CREATE PROCEDURE sp_getDataListQuantityForFormProjectHistory @employee nchar(20), @startDate nchar(10), @endDate nchar(10), @POSMProject nchar(5)
AS
BEGIN
	CREATE TABLE #Temp (QUANTITY int)

	-- Nếu ko nhập ngày BĐ, ngày KT
	IF(@startDate = '' AND @endDate = '')
	BEGIN	
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END

			ELSE
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
			
		END

		ELSE IF (@employee='')
		BEGIN
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKASSIGN WHERE PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
		END
	END

	-- Nếu nhập cả 2 ngày BĐ, ngày KT
	ELSE IF (@startDate <> '' AND @endDate <> '')
	BEGIN	
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)

			END		

			ELSE
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
		END

		ELSE IF (@employee='')
		BEGIN
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKASSIGN WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
		END	
	END 

	-- Nếu chỉ nhập ngày BĐ
	ELSE IF(@startDate <> '' AND @endDate = '')
	BEGIN
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END		

			ELSE
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
		END

		ELSE IF (@employee='')
		BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE STARTDATE>=CONVERT(date,@startDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE STARTDATE>=CONVERT(date,@startDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
		END	
	END

	-- Nếu chỉ nhập ngày KT
	ELSE IF(@startDate = '' AND @endDate <> '')
	BEGIN
		IF (@employee<>'')
		BEGIN
			IF ((SELECT ROLE FROM EMPLOYEE WHERE NAME=@employee)='Admin')
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END

			ELSE 
			BEGIN
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
		 		SELECT COUNT(*) FROM TASKASSIGN WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE EMPLOYEE=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
				INSERT INTO #Temp
				SELECT COUNT(*) FROM TASKCREATING WHERE APPROVER=@employee AND ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			END
		END

		ELSE IF (@employee='')
		BEGIN
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Not complete' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Overdue' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKASSIGN WHERE ENDDATE<=CONVERT(date,@endDate,103) AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
			INSERT INTO #Temp
			SELECT COUNT(*) FROM TASKCREATING WHERE ENDDATE<=CONVERT(date,@endDate,103) AND STATUS='Wait for approval' AND PROJECTID IN (SELECT PROJECTID FROM PROJECT WHERE POSMPROJECT=@POSMProject)
		END	
	END

	SELECT * FROM #Temp
	DROP TABLE #Temp
END
GO

--EXECUTE sp_getDataListQuantityForFormProjectHistory 'vong.vo(Vittoria)', '', '', 'No'
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataForDialogProjectSelection', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataForDialogProjectSelection
GO 

CREATE PROCEDURE sp_getDataForDialogProjectSelection @employee nchar(20), @POSMProject nchar(5), @status nchar(20) 
AS
BEGIN
	IF (@status='Projects in progress')
		SELECT PROJECTID, PROJECTNAME FROM PROJECT WHERE POSMPROJECT=@POSMProject AND STATUS<>'Complete' AND PROJECTID IN (SELECT PROJECTID FROM TASKCREATING WHERE EMPLOYEE=@employee) ORDER BY STARTDATE DESC
	ELSE IF (@status='Completed projects')
		SELECT PROJECTID, PROJECTNAME FROM PROJECT WHERE POSMPROJECT=@POSMProject AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM TASKCREATING WHERE EMPLOYEE=@employee) ORDER BY STARTDATE DESC
	ELSE IF (@status='Department projects')
		SELECT PROJECTID, PROJECTNAME FROM PROJECT WHERE POSMPROJECT=@POSMProject AND PROJECTID NOT IN (SELECT PROJECTID FROM TASKCREATING WHERE EMPLOYEE=@employee) ORDER BY STARTDATE DESC
END
GO
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataListQuantityForDialogProjectSelection', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataListQuantityForDialogProjectSelection
GO 

CREATE PROCEDURE sp_getDataListQuantityForDialogProjectSelection @employee nchar(20), @POSMProject nchar(5)
AS
BEGIN
	CREATE TABLE #Temp (QUANTITY int)

	INSERT INTO #Temp
	SELECT COUNT(*) FROM PROJECT WHERE POSMPROJECT=@POSMProject AND STATUS<>'Complete' AND PROJECTID IN (SELECT PROJECTID FROM TASKCREATING WHERE EMPLOYEE=@employee)
	INSERT INTO #Temp 
	SELECT COUNT(*) FROM PROJECT WHERE POSMPROJECT=@POSMProject AND STATUS='Complete' AND PROJECTID IN (SELECT PROJECTID FROM TASKCREATING WHERE EMPLOYEE=@employee)
	INSERT INTO #Temp 
	SELECT COUNT(*) FROM PROJECT WHERE POSMPROJECT=@POSMProject AND PROJECTID NOT IN (SELECT PROJECTID FROM TASKCREATING WHERE EMPLOYEE=@employee)
		
	SELECT * FROM #Temp
	DROP TABLE #Temp
END
GO
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataListQuantityInStageForFormProjectDiagram', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataListQuantityInStageForFormProjectDiagram
GO 

CREATE PROCEDURE sp_getDataListQuantityInStageForFormProjectDiagram @projectID nchar(20)
AS
BEGIN
	DECLARE @stage int
	DECLARE @task nchar(100)
	
	CREATE TABLE #Temp (QUANTITY int)
	
	SELECT *
	INTO   #Temp1
	FROM   (SELECT STG.PROJECTID, STG.STAGE, TC.TASK FROM STAGE STG LEFT JOIN TASKCREATING TC 
	ON STG.PROJECTID=TC.PROJECTID AND STG.STAGE=TC.STAGE WHERE STG.PROJECTID=@projectID) AS TEMP
	
	WHILE ((SELECT COUNT(*) FROM #Temp1) > 0)
	BEGIN
		SELECT TOP 1 @stage=STAGE, @task=TASK FROM #Temp1
		
		IF (@task IS NULL)
			INSERT INTO #Temp VALUES (0)
		ELSE
		BEGIN
			INSERT INTO #Temp
			SELECT COUNT(*) FROM #Temp1 WHERE STAGE=@stage
		END
		
		DELETE #Temp1 WHERE STAGE=@stage
	END
		
	SELECT * FROM #Temp
	DROP TABLE #Temp
	DROP TABLE #Temp1
END
GO

--EXECUTE sp_getDataListQuantityInStageForFormProjectDiagram 'DM'
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getDataListQuantityInDeptForFormProjectDiagram', N'P') IS NOT NULL
DROP PROCEDURE sp_getDataListQuantityInDeptForFormProjectDiagram
GO 

CREATE PROCEDURE sp_getDataListQuantityInDeptForFormProjectDiagram @projectID nchar(20), @stage int
AS
BEGIN
	DECLARE @department nchar(20)
	DECLARE @projectIDTemp nchar(20)
	
	CREATE TABLE #Temp (QUANTITY int)

	SELECT * INTO #Temp1
	FROM
	(SELECT TEMP.PROJECTID, TEMP.STAGE, DEPT.DEPARTMENT FROM DEPARTMENT DEPT LEFT JOIN 
	(SELECT * FROM TASKCREATING TC LEFT JOIN (SELECT NAME, DEPARTMENT FROM EMPLOYEE) AS EMP ON TC.EMPLOYEE=EMP.NAME WHERE TC.PROJECTID=@projectID AND TC.STAGE=@stage) AS TEMP
	ON DEPT.DEPARTMENT=TEMP.DEPARTMENT) AS TEMP

	WHILE ((SELECT COUNT(*) FROM #Temp1) > 0)
	BEGIN
		SELECT TOP 1 @department=DEPARTMENT, @projectIDTemp=PROJECTID FROM #Temp1
		
		IF (@projectIDTemp IS NULL)
			INSERT INTO #Temp VALUES (0)
		ELSE 
		BEGIN
			INSERT INTO #Temp
			SELECT COUNT(*) FROM #Temp1 WHERE DEPARTMENT=@department
		END
		
		DELETE #Temp1 WHERE DEPARTMENT=@department
	END
		
	SELECT * FROM #Temp
	DROP TABLE #Temp
	DROP TABLE #Temp1
END
GO

--EXECUTE sp_getDataListQuantityInDeptForFormProjectDiagram 'DM', '1'
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getIntQuantityInStageForFormProjectDiagram', N'P') IS NOT NULL
DROP PROCEDURE sp_getIntQuantityInStageForFormProjectDiagram
GO 

CREATE PROCEDURE sp_getIntQuantityInStageForFormProjectDiagram @projectID nchar(20), @stage int
AS
BEGIN
	CREATE TABLE #Temp (QUANTITY int)
	
	INSERT INTO #Temp
	SELECT COUNT(*) FROM TASKCREATING WHERE PROJECTID=@projectID AND STAGE=@stage
		
	SELECT * FROM #Temp
	DROP TABLE #Temp
END
GO

--EXECUTE sp_getIntQuantityInStageForFormProjectDiagram 'DM', 4
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_getListQuantityRelatedToRemovingProject', N'P') IS NOT NULL
DROP PROCEDURE sp_getListQuantityRelatedToRemovingProject
GO 

CREATE PROCEDURE sp_getListQuantityRelatedToRemovingProject @projectID nchar(20)
AS
BEGIN
	CREATE TABLE #Temp (QUANTITY int)
	
	INSERT INTO #Temp
	SELECT COUNT(*) FROM STAGE WHERE PROJECTID=@projectID

	INSERT INTO #Temp
	SELECT COUNT(*) FROM TASKCREATING WHERE PROJECTID=@projectID
		
	SELECT * FROM #Temp
	DROP TABLE #Temp
END
GO

--EXECUTE sp_getListQuantityRelatedToRemovingProject 'DM'
---------------------------------------------------------------------------------
INSERT INTO DEPARTMENT(DEPARTMENT, LEADER) VALUES 
('Marketing', null),
('Design', null),
('RSD', null),
('Shop Staff', null),
('Ware House', null),
('Purchase', null),
('Customer Service', null),
('HR', null)
GO

INSERT INTO EMPLOYEE(NAME, PASSWORD, FULLNAME, GENDER, YEAROFBIRTH, PHONE, EMAIL, POSITION, ROLE, DEPARTMENT, STATUS) VALUES
('vong.vo(Vittoria)', 'longdan01', 'Vo Thanh Vong', 'Female', 1986, null, 'vong.vo@longdan.co.uk', 'Marketing Manager', 'Admin', 'Marketing', 'Working'),
('duy.nguyen(Cesar)', 'longdan02', 'Nguyen Thien Duy', 'Male', 1991, null, 'duy.nguyen@longdan.co.uk', 'Mechandise ', 'Member', 'Marketing', 'Working'),
('cuong.dao(Walter)', 'longdan04', 'Dao Huy Cuong', 'Male', 1994, null, 'cuong.dao@longdan.co.uk', 'Digital Marketing', 'Member', 'Marketing', 'Working'),
('khanh.nguyen(Jack)', 'longdan05', 'Nguyen Hoang Khanh', 'Male', 1991, null, 'khanh.nguyen@longdan.co.uk', 'Suplier Relationship', 'Member', 'Marketing', 'Working'),
('truong.phan(Kobe)', 'longdan06', 'Phan Ngoc Truong', 'Male', 1984, null, 'truong@kimson.co.uk', 'Senior Buyer', 'Admin', 'Purchase', 'Working'),
('truc.tran(Trucy)', 'longdan08', 'Tran Thanh Truc', 'Female', 1987, null, 'truc.tran@longdan.co.uk', 'Designer', 'Member', 'Design', 'Working'),
('cong.nguyen', 'longdan09', 'Cong Nguyen', 'Male', 1988, null, 'cong@kimson.co.uk', 'Designer', 'Member', 'Design', 'Working')
GO

UPDATE DEPARTMENT SET LEADER='vong.vo(Vittoria)' WHERE DEPARTMENT='Marketing'
GO

INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
('GG', 'Chuong trinh giam gia', 'vong.vo(Vittoria)', '05/09/2018', '25/11/2018', 75, 'Normal', 'No', 0, 0, null, null, 'Not complete'),
('DM', 'To chuc chuong trinh demo su kien', 'vong.vo(Vittoria)', '01/09/2018', '01/12/2018', 0, 'Normal', 'No', 0, 0, null, null, 'Not complete'),
('KM', 'Chuong trinh khuyen mai tron 9 tuoi', 'vong.vo(Vittoria)', '05/03/2018', '25/03/2018', 0, 'Normal', 'No', 0, 0, null, null, 'Not complete'),
('IAB', 'In an bia', 'vong.vo(Vittoria)', '01/01/2018', '03/06/2018', 0, 'Admin approval', 'Yes', 0, 0, null, null, 'Not complete'),
('IAR', 'In an rau, cu, qua', 'vong.vo(Vittoria)', '29/01/2018', '31/05/2018', 0, 'Admin approval', 'Yes', 0, 0, null, null, 'Not complete')
GO

INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
('GG', 1, 'Chuan bi', 'Not complete'),
('GG', 2, 'To chuc', 'Not complete'),
('GG', 3, 'Danh gia va lam bao cao', 'Not complete'),
('DM', 1, 'Chuan bi', 'Not complete'),
('DM', 2, 'To chuc', 'Not complete'),
('DM', 3, 'Danh gia va lam bao cao', 'Not complete'),
('DM', 4, null, 'Not complete'),
('KM', 1, 'Chuan bi', 'Not complete'),
('KM', 2, 'To chuc', 'Not complete'),
('KM', 3, 'Danh gia va lam bao cao', 'Not complete'),
('IAB', 1, 'Chuan bi', 'Not complete'),
('IAB', 2, 'To chuc', 'Not complete'),
('IAB', 3, 'Danh gia va lam bao cao', 'Not complete'),
('IAR', 1, 'Chuan bi', 'Not complete'),
('IAR', 2, 'To chuc', 'Not complete'),
('IAR', 3, 'Danh gia va lam bao cao', 'Not complete')
GO

INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, APPROVER, ATTACHFILE,
PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
('DM', 1, 'Demo Campaign proposal', 'vong.vo(Vittoria)', null, '01/09/2018', '15/09/2018', 'Normal', null, 'Yes', 
100, 'Complete', '14/09/2018', '', null, ''), -- làm xong đúng hạn -> green
('DM', 1, 'Human resource management', 'duy.nguyen(Cesar)', null, '16/09/2018', '30/10/2018', 'Normal', null, 'No',
75, 'Not complete', null, '', null, ''), -- đang làm đúng hạn -> aqua
('DM', 1, 'Stock management task', 'cong.nguyen', null, '16/09/2018', '30/09/2018', 'Normal', null, 'No',
50, 'Overdue', null, '', null, ''), -- đang làm trễ hạn -> red
('DM', 2, 'Demo operation', 'cuong.dao(Walter)', null, '01/09/2018', '25/09/2018', 'Normal', null, 'Yes',
100, 'Complete', '26/09/2018', '', null, ''), -- làm xong trễ -> orange
('DM', 3, 'Demo evaluation and report', 'truong.phan(Kobe)', null, '11/09/2018', '30/10/2018', 'Admin approval', null, 'Yes',
100, 'Wait for approval', '12/10/2018', '', null, ''), -- chờ duyệt đúng hạn -> yellowgreen
('DM', 4, 'Design', 'truc.tran(Trucy)', null, '15/10/2018', '30/10/2018', 'Normal', null, 'Yes',
0, 'Not complete', null, '', null, ''), -- task được yêu cầu -> gray)
('GG', 1, '012', 'vong.vo(Vittoria)', null, '01/09/2018', '15/09/2018', 'Normal', null, 'Yes', 
100, 'Complete', '14/09/2018', '', null, ''), -- làm xong đúng hạn -> green
('GG', 1, '123', 'duy.nguyen(Cesar)', null, '16/09/2018', '30/10/2018', 'Normal', null, 'No',
75, 'Not complete', null, '', null, ''), -- đang làm đúng hạn -> aqua
('GG', 1, '345', 'cong.nguyen', null, '16/09/2018', '30/09/2018', 'Normal', null, 'No',
50, 'Overdue', null, '', null, ''), -- đang làm trễ hạn -> red
('GG', 2, '567', 'cuong.dao(Walter)', null, '01/09/2018', '25/09/2018', 'Normal', null, 'Yes',
100, 'Complete', '26/09/2018', '', null, ''), -- làm xong trễ -> orange
('GG', 3, '789', 'truong.phan(Kobe)', null, '11/09/2018', '30/10/2018', 'Admin approval', null, 'Yes',
100, 'Wait for approval', '12/10/2018', '', null, '') -- chờ duyệt đúng hạn -> yellowgreen
GO

---------------------------------------------------------------------------------
-- Dùng SQL Server Agent
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_autoUpdateNotCompleteToOverdue', N'P') IS NOT NULL
DROP PROCEDURE sp_autoUpdateNotCompleteToOverdue
GO 

CREATE PROCEDURE sp_autoUpdateNotCompleteToOverdue
AS
BEGIN
	DECLARE @projectID nchar(20)
	DECLARE @stage int
	DECLARE @task nchar(100)
	DECLARE @status nchar(20)
	DECLARE @endDate date

	SELECT *
	INTO   #Temp
	FROM   TASKCREATING

	WHILE((SELECT COUNT(*) FROM #Temp) > 0)
	BEGIN
		SELECT TOP 1 @projectID=PROJECTID, @stage=STAGE, @task=TASK, @endDate=ENDDATE, @status=STATUS FROM #Temp

		IF((CONVERT(date,getdate(),120)>@endDate)AND @status='Not complete')
			UPDATE TASKCREATING SET STATUS='Overdue' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
	
		DELETE #Temp WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
	END

	DROP TABLE #Temp
END
GO

--EXECUTE sp_autoUpdateNotCompleteToOverdue
--GO
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_autoUpdateTimeDelay', N'P') IS NOT NULL
DROP PROCEDURE sp_autoUpdateTimeDelay
GO 

CREATE PROCEDURE sp_autoUpdateTimeDelay
AS
BEGIN
	DECLARE @projectID nchar(20)
	DECLARE @stage int
	DECLARE @task nchar(100)
	DECLARE @endDate date
	DECLARE @finishDate date
	DECLARE @timeDelay nchar(10)
	DECLARE @numberOfDay int
	DECLARE @timeDelayTemp nchar(10)

	SELECT *
	INTO   #Temp
	FROM   TASKCREATING

	WHILE((SELECT COUNT(*) FROM #Temp) > 0)
	BEGIN
		SELECT TOP 1 @projectID=PROJECTID, @stage=STAGE, @task=TASK, @endDate=ENDDATE, @finishDate=FINISHDATE, @timeDelay=TIMEDELAY FROM #Temp

		-- Cập nhật lần cuối và dừng cập nhật
		IF (@finishDate IS NOT NULL)
		BEGIN
			-- Tính timeDelay mới nhất.
			IF(@finishDate<@endDate)
			BEGIN
				SET @numberOfDay=DATEDIFF(day, @finishDate, @endDate)
				SET @timeDelayTemp='-'+CAST(@numberOfDay AS nchar(9))
			END
			ELSE IF (@finishDate=@endDate)
				SET @timeDelayTemp='0'
			ELSE IF (@finishDate>@endDate)
			BEGIN
				SET @numberOfDay=DATEDIFF(day, @endDate, @finishDate)
				SET @timeDelayTemp='+'+CAST(@numberOfDay AS nchar(9))
			END

			IF (@timeDelay<>@timeDelayTemp)
				UPDATE TASKCREATING SET TIMEDELAY=@timeDelayTemp WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
		END

		-- Cập nhật thường ngày.
		ELSE IF(@finishDate IS NULL)
		BEGIN
			IF (CONVERT(date,getdate(),120)<=@endDate)
			BEGIN
				UPDATE TASKCREATING SET TIMEDELAY='0' WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
			END
			IF(CONVERT(date,getdate(),120)>@endDate)
			BEGIN
				SET @numberOfDay=DATEDIFF(day, @endDate, CONVERT(date,getdate(),120))
				UPDATE TASKCREATING SET TIMEDELAY='+'+CAST(@numberOfDay AS nchar(9)) WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
			END
		END
		
		DELETE #Temp WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
	END

	DROP TABLE #Temp
END
GO

--EXECUTE sp_autoUpdateTimeDelay
--GO

---------------------------------------------------------------------------------
IF OBJECT_ID('sp_autoCreateRepeatedProject', N'P') IS NOT NULL
DROP PROCEDURE sp_autoCreateRepeatedProject
GO

CREATE PROCEDURE sp_autoCreateRepeatedProject
AS
BEGIN
	DECLARE @projectID nchar(20)
	DECLARE @dateRepeat int
	DECLARE @autoRepeat int
	DECLARE @startDateRepeat date
	DECLARE @endDateRepeat date
	DECLARE @endDate date
	DECLARE @startDate date
	
	DECLARE @projectName nchar(50)
	DECLARE @leader nchar(20)
	DECLARE @projectType nchar(20)
	DECLARE @POSMProject nchar(10)
	DECLARE @startDate_endDate int
	
	DECLARE @dateNow nchar(10)
	DECLARE @count int

	SET @count=0
	SET @dateNow=CONVERT(nchar(10),GETDATE(),103)
	
	SELECT *
	INTO   #Temp
	FROM   PROJECT

	WHILE ((SELECT COUNT(*) FROM #Temp) > 0)
	BEGIN
		SELECT TOP 1 @projectID=PROJECTID, @dateRepeat=DATEREPEAT, @autoRepeat=AUTOREPEAT, @startDateRepeat=STARTDATEREPEAT, 
		@endDateRepeat=ENDDATEREPEAT, @startDate=STARTDATE, @endDate=ENDDATE, @projectName=PROJECTNAME, @leader=LEADER, 
		@projectType=PROJECTTYPE, @POSMProject=POSMPROJECT FROM #Temp
				
		-- Chỉ bật và tắt, ko được bật lại.
		IF (@dateRepeat<>0 AND @autoRepeat=0 AND @startDateRepeat IS NULL AND @endDateRepeat IS NULL)
		BEGIN
			-- Nếu end date + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat,@endDate),120) = CONVERT(date,getdate(),120))
			BEGIN
				SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			
				INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, 
				DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
				(RTRIM(@projectID)+' 1, '+@dateNow, @projectName, @leader, GETDATE(), 
				CONVERT(date,DATEADD(day,@startDate_endDate,GETDATE()),120), 0, @projectType, @POSMProject, 0, 0, NULL, NULL, 'Not complete')
			END
		END

		-- Khi tắt auto repeat hay daterepeat=0 thì tắt luôn cái còn lại và ko được bật lại.
		ELSE IF (@dateRepeat<>0 AND @autoRepeat<>0 AND @startDateRepeat IS NULL AND @endDateRepeat IS NULL)
		BEGIN
			SELECT @count=COUNT(*) FROM PROJECT WHERE PROJECTID LIKE RTRIM(@projectID)+'%'
			SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			
			-- Nếu end date + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat*@count+@startDate_endDate*(@count-1),@endDate),120) = CONVERT(date,getdate(),120))
			BEGIN
				INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, 
				DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
				(RTRIM(@projectID)+' 2, '+@dateNow, @projectName, @leader, GETDATE(), 
				CONVERT(date,DATEADD(day,@startDate_endDate,GETDATE()),120), 0, @projectType, @POSMProject, 0, 0, NULL, NULL, 'Not comlete')
			END
		END

		-- được bật lại thoải mái
		ELSE IF(@dateRepeat=0 AND @autoRepeat=0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			IF (@startDateRepeat = CONVERT(date,getdate(),120))
			BEGIN
				SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			
				INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, 
				DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
				(RTRIM(@projectID)+' 3, '+@dateNow, @projectName, @leader, GETDATE(), 
				CONVERT(date,DATEADD(day,@startDate_endDate,GETDATE()),120), 0, @projectType, @POSMProject, 0, 0, NULL, NULL, 'Not complete')
			END
		END

		-- được bật lại thoải mái. 
		-- Nếu đã tạo 1 dự án lặp lại, nếu endDateRepeat+dateRepeat<now thì khi tắt dateRepeat tắt luôn startDateRepeat+endDateRepeat
		-- ngược lại nếu tắt startDateRepeat+endDateRepeat thì tắt dateRepeat.
		ELSE IF(@dateRepeat<>0 AND @autoRepeat=0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			IF (@startDateRepeat = CONVERT(date,getdate(),120))
			BEGIN
				SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			
				INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, 
				DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
				(RTRIM(@projectID)+' 4, '+@dateNow, @projectName, @leader, GETDATE(), 
				CONVERT(date,DATEADD(day,@startDate_endDate,GETDATE()),120), 0, @projectType, @POSMProject, 0, 0, NULL, NULL, 'Not complete')

			END

			-- Nếu end date repeat + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat,@endDateRepeat),120) = CONVERT(date,getdate(),120))
			BEGIN
				SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			
				INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, 
				DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
				(RTRIM(@projectID)+' 4, '+@dateNow, @projectName, @leader, GETDATE(), 
				CONVERT(date,DATEADD(day,@startDate_endDate,GETDATE()),120), 0, @projectType, @POSMProject, 0, 0, NULL, NULL, 'Not complete')
			END
		END
	
		-- Nếu đã tạo 1-n dự án lặp lại, nếu đang trong quá trình tạo thì không cho edit khi 1 lặp đã đc tạo.
		-- khi tắt dateRepeat tắt luôn auto + startDateRepeat+endDateRepeat
		-- khi tắt autoRepeat tắt luôn dateRepeat + startDateRepeat+endDateRepeat
		-- khi tắt startDateRepeat+endDateRepeat thì tắt dateRepeat+autoRepeat
		ELSE IF(@dateRepeat<>0 AND @autoRepeat<>0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			IF (@startDateRepeat = CONVERT(date,getdate(),120))
			BEGIN
				SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			
				INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, 
				DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
				(RTRIM(@projectID)+' 5, '+@dateNow, @projectName, @leader, GETDATE(), 
				CONVERT(date,DATEADD(day,@startDate_endDate,GETDATE()),120), 0, @projectType, @POSMProject, 0, 0, NULL, NULL, 'Not complete')

			END
		
			SELECT @count=COUNT(*) FROM PROJECT WHERE PROJECTID LIKE RTRIM(@projectID)+'%' AND STARTDATE >= @startDateRepeat
			SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			
			-- Nếu end date + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat*@count+@startDate_endDate*(@count-1),@endDateRepeat),120) =
			CONVERT(date,getdate(),120))
			BEGIN
				INSERT INTO PROJECT(PROJECTID, PROJECTNAME, LEADER, STARTDATE, ENDDATE, PROGRESS, PROJECTTYPE, POSMPROJECT, 
				DATEREPEAT, AUTOREPEAT, STARTDATEREPEAT, ENDDATEREPEAT, STATUS) VALUES
				(RTRIM(@projectID)+' 5, '+@dateNow, @projectName, @leader, GETDATE(), 
				CONVERT(date,DATEADD(day,@startDate_endDate,GETDATE()),120), 0, @projectType, @POSMProject, 0, 0, NULL, NULL, 'Not complete')
			END
		END
		
		DELETE #Temp WHERE PROJECTID=@projectID
	END
		
	DROP TABLE #Temp
END
GO

--EXEC sp_autoCreateRepeatedProject
--GO
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_autoCreateRepeatedStage', N'P') IS NOT NULL
DROP PROCEDURE sp_autoCreateRepeatedStage
GO

CREATE PROCEDURE sp_autoCreateRepeatedStage
AS
BEGIN
	DECLARE @projectID nchar(20)
	DECLARE @dateRepeat int
	DECLARE @autoRepeat int
	DECLARE @startDateRepeat date
	DECLARE @endDateRepeat date
	DECLARE @endDate date
	DECLARE @startDate date
	
	DECLARE @stage int
	DECLARE @stageSubject nchar(30)
	DECLARE @startDate_endDate int
	
	DECLARE @dateNow nchar(10)
	DECLARE @count int

	SET @count=0
	SET @dateNow=CONVERT(nchar(10),GETDATE(),103)

	SELECT *
	INTO   #Temp
	FROM   PROJECT

	WHILE ((SELECT COUNT(*) FROM #Temp) > 0)
	BEGIN
		SELECT TOP 1 @projectID=PROJECTID, @dateRepeat=DATEREPEAT, @autoRepeat=AUTOREPEAT, @startDateRepeat=STARTDATEREPEAT, 
		@endDateRepeat=ENDDATEREPEAT, @startDate=STARTDATE, @endDate=ENDDATE FROM #Temp
				
		-- Chỉ bật và tắt, ko được bật lại.
		IF (@dateRepeat<>0 AND @autoRepeat=0 AND @startDateRepeat IS NULL AND @endDateRepeat IS NULL)
		BEGIN
			-- Nếu end date + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat,@endDate),120) = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp1
				FROM   STAGE WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp1) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @stageSubject=STAGESUBJECT FROM #Temp1

					INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
					(RTRIM(@projectID)+' 1, '+@dateNow, @stage, @stageSubject, 'Not complete')
				
					DELETE #Temp1 WHERE PROJECTID=@projectID AND STAGE=@stage
				END

				DROP TABLE #Temp1
			END
		END

		-- Khi tắt auto repeat hay daterepeat=0 thì tắt luôn cái còn lại và ko được bật lại.
		ELSE IF (@dateRepeat<>0 AND @autoRepeat<>0 AND @startDateRepeat IS NULL AND @endDateRepeat IS NULL)
		BEGIN
			SELECT @count=COUNT(*) FROM PROJECT WHERE PROJECTID LIKE RTRIM(@projectID)+'%'
			SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			SET @count=@count-1
			
			-- Nếu end date + date repeat = today
			IF (@count <> 0 AND (CONVERT(date,DATEADD(day,@dateRepeat*@count+@startDate_endDate*(@count-1),@endDate),120) 
			= CONVERT(date,getdate(),120)))
			BEGIN
				SELECT *
				INTO   #Temp2
				FROM   STAGE WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp2) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @stageSubject=STAGESUBJECT FROM #Temp2

					INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
					(RTRIM(@projectID)+' 2, '+@dateNow, @stage, @stageSubject, 'Not complete')
				
					DELETE #Temp2 WHERE PROJECTID=@projectID AND STAGE=@stage
				END

				DROP TABLE #Temp2
			END
		END

		-- được bật lại thoải mái
		ELSE IF(@dateRepeat=0 AND @autoRepeat=0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			IF (@startDateRepeat = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp3
				FROM   STAGE WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp3) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @stageSubject=STAGESUBJECT FROM #Temp3

					INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
					(RTRIM(@projectID)+' 3, '+@dateNow, @stage, @stageSubject, 'Not complete')
				
					DELETE #Temp3 WHERE PROJECTID=@projectID AND STAGE=@stage
				END

				DROP TABLE #Temp3
			END
		END

		-- được bật lại thoải mái. 
		-- Nếu đã tạo 1 dự án lặp lại, nếu endDateRepeat+dateRepeat<now thì khi tắt dateRepeat tắt luôn startDateRepeat+endDateRepeat
		-- ngược lại nếu tắt startDateRepeat+endDateRepeat thì tắt dateRepeat.
		ELSE IF(@dateRepeat<>0 AND @autoRepeat=0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			IF (@startDateRepeat = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp4
				FROM   STAGE WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp4) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @stageSubject=STAGESUBJECT FROM #Temp4

					INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
					(RTRIM(@projectID)+' 4, '+@dateNow, @stage, @stageSubject, 'Not complete')
				
					DELETE #Temp4 WHERE PROJECTID=@projectID AND STAGE=@stage
				END

				DROP TABLE #Temp4
			END

			-- Nếu end date repeat + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat,@endDateRepeat),120) = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp5
				FROM   STAGE WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp5) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @stageSubject=STAGESUBJECT FROM #Temp5

					INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
					(RTRIM(@projectID)+' 4, '+@dateNow, @stage, @stageSubject, 'Not complete')
				
					DELETE #Temp5 WHERE PROJECTID=@projectID AND STAGE=@stage
				END

				DROP TABLE #Temp5
			END
		END
	
		-- Nếu đã tạo 1-n dự án lặp lại, nếu đang trong quá trình tạo thì không cho edit khi 1 lặp đã đc tạo.
		-- khi tắt dateRepeat tắt luôn auto + startDateRepeat+endDateRepeat
		-- khi tắt autoRepeat tắt luôn dateRepeat + startDateRepeat+endDateRepeat
		-- khi tắt startDateRepeat+endDateRepeat thì tắt dateRepeat+autoRepeat
		ELSE IF(@dateRepeat<>0 AND @autoRepeat<>0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			--IF (@startDateRepeat = CONVERT(date,getdate(),120))
			--BEGIN
			--	SELECT *
			--	INTO   #Temp6
			--	FROM   STAGE WHERE PROJECTID=@projectID

			--	WHILE ((SELECT COUNT(*) FROM #Temp6) > 0)
			--	BEGIN
			--		SELECT TOP 1 @stage=STAGE, @stageSubject=STAGESUBJECT FROM #Temp6

			--		INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
			--		(RTRIM(@projectID)+' 5, '+@dateNow, @stage, @stageSubject, 'Not complete')
				
			--		DELETE #Temp6 WHERE PROJECTID=@projectID AND STAGE=@stage
			--	END

			--	DROP TABLE #Temp6
			--END
		
			SELECT @count=COUNT(*) FROM PROJECT WHERE PROJECTID LIKE RTRIM(@projectID)+'%' AND STARTDATE >= @startDateRepeat
			SET @startDate_endDate=DATEDIFF(day, @startDate, @endDate)
			SET @count=@count-1
			
			-- Nếu end date + date repeat = today
			IF (@count<>-1 AND (CONVERT(date,DATEADD(day,@dateRepeat*@count+@startDate_endDate*(@count-1),@endDateRepeat),120) =
			CONVERT(date,getdate(),120)))
			BEGIN
				SELECT *
				INTO   #Temp7
				FROM   STAGE WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp7) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @stageSubject=STAGESUBJECT FROM #Temp7

					INSERT INTO STAGE(PROJECTID, STAGE, STAGESUBJECT, STATUS) VALUES
					(RTRIM(@projectID)+' 5, '+@dateNow, @stage, @stageSubject, 'Not complete')
				
					DELETE #Temp7 WHERE PROJECTID=@projectID AND STAGE=@stage
				END

				DROP TABLE #Temp7
			END
		END
		
		DELETE #Temp WHERE PROJECTID=@projectID
	END
		
	DROP TABLE #Temp
END
GO

--EXEC sp_autoCreateRepeatedStage
--GO
---------------------------------------------------------------------------------
IF OBJECT_ID('sp_autoCreateRepeatedTaskCreating', N'P') IS NOT NULL
DROP PROCEDURE sp_autoCreateRepeatedTaskCreating
GO

CREATE PROCEDURE sp_autoCreateRepeatedTaskCreating
AS 
BEGIN
	DECLARE @dateRepeat int
	DECLARE @startDateRepeat date
	DECLARE @endDateRepeat date
	DECLARE @autoRepeat int
	DECLARE @endDateProject date
	DECLARE @startDateProject date
	
	DECLARE @employee nchar(20)
	DECLARE @projectID nchar(20)
	DECLARE @stage int
	DECLARE @task nchar(100)
	DECLARE @taskDescription nchar(300)
	DECLARE @taskType nchar(20)
	DECLARE @approver nchar(20)
	DECLARE @attachFile nchar(3)

	DECLARE @startDateTask date
	DECLARE @endDateTask date
	DECLARE @startDateProject_startDateTask int
	DECLARE @startDateTask_endDateTask int
	DECLARE @startDateProject_endDateProject int
	DECLARE @dateNow nchar(10)
	DECLARE @count int

	SET @count=0
	SET @dateNow=CONVERT(nchar(10),GETDATE(),103)

	SELECT *
	INTO   #Temp7
	FROM   PROJECT

	WHILE ((SELECT COUNT(*) FROM #Temp7) > 0)
	BEGIN
		SELECT TOP 1 @projectID=PROJECTID, @dateRepeat=DATEREPEAT, @autoRepeat=AUTOREPEAT, @startDateRepeat=STARTDATEREPEAT, @endDateRepeat=ENDDATEREPEAT, @startDateProject=STARTDATE, @endDateProject=ENDDATE FROM #Temp7
		SET @startDateProject_endDateProject = DATEDIFF(day, @startDateProject, @endDateProject)
		
		-- Chỉ bật và tắt, ko được bật lại.
		IF (@dateRepeat<>0 AND @autoRepeat=0 AND @startDateRepeat IS NULL AND @endDateRepeat IS NULL)
		BEGIN
			-- Nếu end date + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat,@endDateProject),120) = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp
				FROM   TASKCREATING WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @task=TASK, @employee=EMPLOYEE, @taskDescription=TASKDESCRIPTION, 
					@startDateTask=STARTDATE, @endDateTask=ENDDATE, @taskType=TASKTYPE, @approver=APPROVER, @attachFile=ATTACHFILE 
					FROM #Temp
				
					SET @startDateProject_startDateTask=DATEDIFF(day, @startDateProject, @startDateTask)
					SET @startDateTask_endDateTask=DATEDIFF(day, @startDateTask, @endDateTask)

					INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, 
					APPROVER, ATTACHFILE, PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
					(RTRIM(@projectID)+' 1, '+@dateNow, @stage, @task, @employee, @taskDescription, 
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask,GETDATE()),120),  
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask+@startDateTask_endDateTask,GETDATE()),120), 
					@taskType, @approver, @attachFile, 0, 'Not complete', NULL, '0', 'Gray', '')
				
					DELETE #Temp WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
				END

				DROP TABLE #Temp

				UPDATE PROJECT SET DATEREPEAT=0 WHERE PROJECTID=@projectID
			END
		END

		-- Khi tắt auto repeat hay daterepeat=0 thì tắt luôn cái còn lại và ko được bật lại.
		ELSE IF (@dateRepeat<>0 AND @autoRepeat<>0 AND @startDateRepeat IS NULL AND @endDateRepeat IS NULL)
		BEGIN
			SELECT @count=COUNT(*) FROM PROJECT WHERE PROJECTID LIKE RTRIM(@projectID)+'%'
			SET @count=@count-1
			
			-- Nếu end date + date repeat = today
			IF (@count<>0 AND (CONVERT(date,DATEADD(day,@dateRepeat*@count+@startDateProject_endDateProject*(@count-1),@endDateProject),120) = 
			CONVERT(date,getdate(),120)))
			BEGIN
				SELECT *
				INTO   #Temp1
				FROM   TASKCREATING WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp1) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @task=TASK, @employee=EMPLOYEE, @taskDescription=TASKDESCRIPTION, 
					@startDateTask=STARTDATE, @endDateTask=ENDDATE, @taskType=TASKTYPE, @approver=APPROVER, @attachFile=ATTACHFILE 
					FROM #Temp1
				
					SET @startDateProject_startDateTask=DATEDIFF(day, @startDateProject, @startDateTask)
					SET @startDateTask_endDateTask=DATEDIFF(day, @startDateTask, @endDateTask)

					INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, 
					APPROVER, ATTACHFILE, PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
					(RTRIM(@projectID)+' 2, '+@dateNow, @stage, @task, @employee, @taskDescription, 
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask,GETDATE()),120),  
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask+@startDateTask_endDateTask,GETDATE()),120), 
					@taskType, @approver, @attachFile, 0, 'Not complete', NULL, '0', 'Gray', '')
				
					DELETE #Temp1 WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
				END

				DROP TABLE #Temp1
			END
		END

		-- được bật lại thoải mái
		ELSE IF(@dateRepeat=0 AND @autoRepeat=0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			IF (@startDateRepeat = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp2
				FROM   TASKCREATING WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp2) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @task=TASK, @employee=EMPLOYEE, @taskDescription=TASKDESCRIPTION, 
					@startDateTask=STARTDATE, @endDateTask=ENDDATE, @taskType=TASKTYPE, @approver=APPROVER, @attachFile=ATTACHFILE 
					FROM #Temp2
				
					SET @startDateProject_startDateTask=DATEDIFF(day, @startDateProject, @startDateTask)
					SET @startDateTask_endDateTask=DATEDIFF(day, @startDateTask, @endDateTask)

					INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, 
					APPROVER, ATTACHFILE, PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
					(RTRIM(@projectID)+' 3, '+@dateNow, @stage, @task, @employee, @taskDescription, 
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask,GETDATE()),120),  
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask+@startDateTask_endDateTask,GETDATE()),120), 
					@taskType, @approver, @attachFile, 0, 'Not complete', NULL, '0', 'Gray', '')

					DELETE #Temp2 WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
				END

				DROP TABLE #Temp2

				UPDATE PROJECT SET STARTDATEREPEAT=NULL, ENDDATEREPEAT=NULL WHERE PROJECTID=@projectID
			END
		END

		-- được bật lại thoải mái. 
		-- Nếu đã tạo 1 dự án lặp lại, nếu endDateRepeat+dateRepeat<now thì khi tắt dateRepeat tắt luôn startDateRepeat+endDateRepeat
		-- ngược lại nếu tắt startDateRepeat+endDateRepeat thì tắt dateRepeat.
		ELSE IF(@dateRepeat<>0 AND @autoRepeat=0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			IF (@startDateRepeat = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp3
				FROM   TASKCREATING WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp3) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @task=TASK, @employee=EMPLOYEE, @taskDescription=TASKDESCRIPTION, 
					@startDateTask=STARTDATE, @endDateTask=ENDDATE, @taskType=TASKTYPE, @approver=APPROVER, @attachFile=ATTACHFILE 
					FROM #Temp3
				
					SET @startDateProject_startDateTask=DATEDIFF(day, @startDateProject, @startDateTask)
					SET @startDateTask_endDateTask=DATEDIFF(day, @startDateTask, @endDateTask)

					INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, 
					APPROVER, ATTACHFILE, PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
					(RTRIM(@projectID)+' 4, '+@dateNow, @stage, @task, @employee, @taskDescription, 
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask,GETDATE()),120),  
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask+@startDateTask_endDateTask,GETDATE()),120), 
					@taskType, @approver, @attachFile, 0, 'Not complete', NULL, '0', 'Gray', '')
				
					DELETE #Temp3 WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
				END

				DROP TABLE #Temp3
			END

			-- Nếu end date repeat + date repeat = today
			IF (CONVERT(date,DATEADD(day,@dateRepeat,@endDateRepeat),120) = CONVERT(date,getdate(),120))
			BEGIN
				SELECT *
				INTO   #Temp4
				FROM   TASKCREATING WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp4) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @task=TASK, @employee=EMPLOYEE, @taskDescription=TASKDESCRIPTION, 
					@startDateTask=STARTDATE, @endDateTask=ENDDATE, @taskType=TASKTYPE, @approver=APPROVER, @attachFile=ATTACHFILE 
					FROM #Temp4
				
					SET @startDateProject_startDateTask=DATEDIFF(day, @startDateProject, @startDateTask)
					SET @startDateTask_endDateTask=DATEDIFF(day, @startDateTask, @endDateTask)

					INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, 
					APPROVER, ATTACHFILE, PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
					(RTRIM(@projectID)+' 4, '+@dateNow, @stage, @task, @employee, @taskDescription, 
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask,GETDATE()),120),  
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask+@startDateTask_endDateTask,GETDATE()),120), 
					@taskType, @approver, @attachFile, 0, 'Not complete', NULL, '0', 'Gray', '')
				
					DELETE #Temp4 WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
				END

				DROP TABLE #Temp4

				UPDATE PROJECT SET DATEREPEAT=0, STARTDATEREPEAT=NULL, ENDDATEREPEAT=NULL WHERE PROJECTID=@projectID
			END
		END
	
		-- Nếu đã tạo 1-n dự án lặp lại, nếu đang trong quá trình tạo thì không cho edit khi 1 lặp đã đc tạo.
		-- khi tắt dateRepeat tắt luôn auto + startDateRepeat+endDateRepeat
		-- khi tắt autoRepeat tắt luôn dateRepeat + startDateRepeat+endDateRepeat
		-- khi tắt startDateRepeat+endDateRepeat thì tắt dateRepeat+autoRepeat
		ELSE IF(@dateRepeat<>0 AND @autoRepeat<>0 AND @startDateRepeat IS NOT NULL AND @endDateRepeat IS NOT NULL)
		BEGIN
			-- Nếu start date repeat = today
			--IF (@startDateRepeat = CONVERT(date,getdate(),120))
			--BEGIN
			--	SELECT *
			--	INTO   #Temp5
			--	FROM   TASKCREATING WHERE PROJECTID=@projectID

			--	WHILE ((SELECT COUNT(*) FROM #Temp5) > 0)
			--	BEGIN
			--		SELECT TOP 1 @stage=STAGE, @task=TASK, @employee=EMPLOYEE, @taskDescription=TASKDESCRIPTION, 
			--		@startDateTask=STARTDATE, @endDateTask=ENDDATE, @taskType=TASKTYPE, @approver=APPROVER, @attachFile=ATTACHFILE 
			--		FROM #Temp5
				
			--		SET @startDateProject_startDateTask=DATEDIFF(day, @startDateProject, @startDateTask)
			--		SET @startDateTask_endDateTask=DATEDIFF(day, @startDateTask, @endDateTask)

			--		INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, 
			--		APPROVER, ATTACHFILE, PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
			--		(RTRIM(@projectID)+' 5, '+@dateNow, @stage, @task, @employee, @taskDescription, 
			--		CONVERT(date,DATEADD(day,@startDateProject_startDateTask,GETDATE()),120),  
			--		CONVERT(date,DATEADD(day,@startDateProject_startDateTask+@startDateTask_endDateTask,GETDATE()),120), 
			--		@taskType, @approver, @attachFile, 0, 'Not complete', NULL, '', 'Gray', '')
				
			--		DELETE #Temp5 WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
			--	END

			--	DROP TABLE #Temp5
			--END
		
			SELECT @count=COUNT(*) FROM PROJECT WHERE PROJECTID LIKE RTRIM(@projectID)+'%' AND STARTDATE >= @startDateRepeat
			SET @count=@count-1
			
			-- Nếu end date + date repeat = today
			IF (@count<>-1 AND (CONVERT(date,DATEADD(day,@dateRepeat*@count+@startDateProject_endDateProject*(@count-1),@endDateRepeat),120) = 
			CONVERT(date,getdate(),120)))
			BEGIN
				SELECT *
				INTO   #Temp6
				FROM   TASKCREATING WHERE PROJECTID=@projectID

				WHILE ((SELECT COUNT(*) FROM #Temp6) > 0)
				BEGIN
					SELECT TOP 1 @stage=STAGE, @task=TASK, @employee=EMPLOYEE, @taskDescription=TASKDESCRIPTION, 
					@startDateTask=STARTDATE, @endDateTask=ENDDATE, @taskType=TASKTYPE, @approver=APPROVER, @attachFile=ATTACHFILE 
					FROM #Temp6
				
					SET @startDateProject_startDateTask=DATEDIFF(day, @startDateProject, @startDateTask)
					SET @startDateTask_endDateTask=DATEDIFF(day, @startDateTask, @endDateTask)

					INSERT INTO TASKCREATING(PROJECTID, STAGE, TASK, EMPLOYEE, TASKDESCRIPTION, STARTDATE, ENDDATE, TASKTYPE, 
					APPROVER, ATTACHFILE, PROGRESS, STATUS, FINISHDATE, TIMEDELAY, COLOR, NOTE) VALUES
					(RTRIM(@projectID)+' 5, '+@dateNow, @stage, @task, @employee, @taskDescription, 
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask,GETDATE()),120),  
					CONVERT(date,DATEADD(day,@startDateProject_startDateTask+@startDateTask_endDateTask,GETDATE()),120), 
					@taskType, @approver, @attachFile, 0, 'Not complete', NULL, '0', 'Gray', '')
				
					DELETE #Temp6 WHERE PROJECTID=@projectID AND STAGE=@stage AND TASK=@task
				END
			
				DROP TABLE #Temp6
			END
		END
				
		DELETE #Temp7 WHERE PROJECTID=@projectID
	END

	DROP TABLE #Temp7
END
GO

--EXEC sp_autoCreateRepeatedTaskCreating
--GO
---------------------------------------------------------------------------------
CREATE TRIGGER update_Name_Employee
ON EMPLOYEE
INSTEAD OF UPDATE
AS 
BEGIN
	SET NOCOUNT ON;
	IF UPDATE(NAME)
	BEGIN
		DECLARE @new nchar(20)
		SELECT @new=NAME FROM inserted 
		DECLARE @old nchar(20)
		SELECT @old=NAME FROM deleted 
		
		INSERT INTO DEPARTMENT VALUES('tempValue', NULL)
		INSERT INTO EMPLOYEE VALUES('tempValue', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Staff', 'tempValue')

		-- UPDATE CỘT LEADER TRONG DEPARTMENT + CỘT EMPLOYEE TRONG TASKCREATING + CỘT APPROVER TRONG TASKCREATING
		UPDATE DEPARTMENT SET LEADER='tempValue' WHERE LEADER=@old
		UPDATE TASKCREATING SET EMPLOYEE='tempValue' WHERE EMPLOYEE=@old
		UPDATE TASKCREATING SET APPROVER='tempValue' WHERE APPROVER=@old

		UPDATE EMPLOYEE SET NAME=@new WHERE NAME=@old

		UPDATE DEPARTMENT SET LEADER=@new WHERE LEADER='tempValue'
		UPDATE TASKCREATING SET EMPLOYEE=@new WHERE EMPLOYEE='tempValue'
		UPDATE TASKCREATING SET APPROVER=@new WHERE APPROVER='tempValue'

		DELETE EMPLOYEE WHERE NAME='tempValue'
		DELETE DEPARTMENT WHERE DEPARTMENT='tempValue'
	END
	
	IF UPDATE(DEPARTMENT)
	BEGIN
		DECLARE @new_Department nchar(20)
		DECLARE @name nchar(20)
		DECLARE listDepartment CURSOR FOR SELECT DEPARTMENT, NAME FROM inserted

		OPEN listDepartment

		FETCH NEXT FROM listDepartment INTO @new_Department, @name
		WHILE @@FETCH_STATUS=0
		BEGIN
			IF NOT EXISTS(SELECT * FROM DEPARTMENT WHERE DEPARTMENT=@new_Department)
			BEGIN
				RAISERROR ('Error: Cannot update because department ''%s'' does not exist!', 16, 1, @new_Department)
				ROLLBACK
			END
			ELSE UPDATE EMPLOYEE SET DEPARTMENT=@new_Department WHERE NAME=@name

			FETCH NEXT FROM listDepartment INTO @new_Department, @name
		END

		CLOSE listDepartment
		DEALLOCATE listDepartment
	END
END
GO

drop trigger update_Name_Employee
GO
---------------------------------------------------------------------------------
CREATE TRIGGER update_Department_Department
ON DEPARTMENT 
INSTEAD OF UPDATE 
AS 
BEGIN
	SET NOCOUNT ON;
	IF UPDATE(DEPARTMENT)
	BEGIN
		DECLARE @new nchar(20)
		SELECT @new=DEPARTMENT FROM inserted 
		DECLARE @old nchar(20)
		SELECT @old=DEPARTMENT FROM deleted
		
		INSERT INTO DEPARTMENT VALUES('tempValue', NULL)

		UPDATE EMPLOYEE SET DEPARTMENT='tempValue' WHERE DEPARTMENT=@old
		UPDATE DEPARTMENT SET DEPARTMENT=@new WHERE DEPARTMENT=@old
		UPDATE EMPLOYEE SET DEPARTMENT=@new WHERE DEPARTMENT='tempValue'
		
		DELETE DEPARTMENT WHERE DEPARTMENT='tempValue'
	END

	IF UPDATE(LEADER)
	BEGIN
		DECLARE @new_Leader nchar(20)
		DECLARE @department nchar(20)
		DECLARE listLeader CURSOR FOR SELECT LEADER, DEPARTMENT FROM inserted

		OPEN listLeader

		FETCH NEXT FROM listLeader INTO @new_Leader, @department
		WHILE @@FETCH_STATUS=0
		BEGIN
			IF (@new_Leader='null')
			BEGIN
				RAISERROR ('Error: Cannot update because leader ''%s'' does not exist!', 16, 1, @new_Leader)
				ROLLBACK
			END
			IF (@new_Leader IS NOT NULL AND @new_Leader <> 'NULL')
			BEGIN
				IF NOT EXISTS(SELECT * FROM EMPLOYEE WHERE NAME=@new_Leader)
				BEGIN
					RAISERROR ('Error: Cannot update because leader ''%s'' does not exist!', 16, 1, @new_Leader)
					ROLLBACK
				END
				ELSE UPDATE DEPARTMENT SET LEADER=@new_Leader WHERE DEPARTMENT=@department
			END
			ELSE UPDATE DEPARTMENT SET LEADER=@new_Leader WHERE DEPARTMENT=@department
	
			FETCH NEXT FROM listLeader INTO @new_Leader, @department
		END

		CLOSE listLeader
		DEALLOCATE listLeader
	END
END
GO

drop trigger update_Department_Department
GO
---------------------------------------------------------------------------------
CREATE TRIGGER insert_Leader_Department
ON DEPARTMENT
FOR INSERT
AS 
BEGIN
	IF UPDATE(LEADER)
	BEGIN
		IF ((SELECT LEADER FROM inserted) IS NOT NULL)
			IF NOT EXISTS(SELECT * FROM inserted I JOIN EMPLOYEE EMP ON I.LEADER=EMP.NAME)
			BEGIN
				RAISERROR ('Error: Cannot update because leader does not exist!', 16, 1)
				ROLLBACK
			END
	END
END
GO

drop trigger insert_Leader_Department
GO
---------------------------------------------------------------------------------
CREATE TRIGGER insert_Department_Employee
ON EMPLOYEE
FOR INSERT
AS 
BEGIN
	IF UPDATE(DEPARTMENT)
	BEGIN
		IF NOT EXISTS(SELECT * FROM inserted I JOIN DEPARTMENT DEPT ON I.DEPARTMENT=DEPT.DEPARTMENT)
		BEGIN
			RAISERROR ('Error: Cannot update because department does not exist!', 16, 1)
			ROLLBACK
		END
	END
END
GO

drop trigger insert_Department_Employee
GO
---------------------------------------------------------------------------------
--DevExpress.Patch.InMemoryPatch, DevExpress.Patch.Common, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7fc7bfca2443de66